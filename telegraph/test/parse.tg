/* the grammar */
token DNA { A C G T };
term DNA1[DNA], DNA2[DNA];
nonterm start, match, insert, delete;
prob subst[DNA][DNA], gapOpen, gapExtend;
start -> DNA1 start
	| DNA2 start
	| start DNA1
	| start DNA2
	| match;
match -> DNA1 DNA2 match { subst[$1][$2] }
	| DNA2 insert     { gapOpen }
	| DNA1 delete     { gapOpen }
	| end;
insert -> DNA2 insert    { gapExtend }
	| match;
delete -> DNA1 delete    gapExtend
	| match;

/* the "script" */
gapOpen = .5;
gapExtend = .3;
subst[A][C] = 1.3;
pset my_simple_parse = { start (match) };
pset my_parse = { start (match (DNA1[A]DNA2[A] match (DNA2[C] insert (match (end))))) };
pset my_pset = parse ( start -> DNA1="AA", DNA2="C" );
func my_parse_likelihood = psum (my_simple_parse);
func my_likelihood = psum (my_pset);
pset still_my_parse = pmax (my_pset);
pset best_parse = pmax (my_pset);
pset random_parse = psample my_pset;
func my_deriv = dlog (my_likelihood) / dlog (gapOpen);
func my_deriv2 = dlog my_parse_likelihood / dlog subst[A][A];
