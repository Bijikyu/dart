/* the grammar */
token DNA { A C G T };
term DNA1[DNA], DNA2[DNA];
nonterm start, match, insert, delete;
prob subst[DNA][DNA], probby[DNA][DNA][DNA], gapOpen, gapExtend;
start -> DNA1 start
	| DNA2 start  {0.4 * 0.5}
	| start DNA1	{1.1 + gapOpen}	
	| start DNA2  {1.3 * 0.6 + gapExtend} 
	| match;
match -> DNA1 DNA2 match { subst[$1][$2] }
	| DNA2 insert     { gapOpen }
	| DNA1 delete      { probby[0][1][3] }
	| end;
insert -> DNA2 insert    { probby[$1][$1][$1] }
	| match;
delete -> DNA1 delete    gapExtend
	| match;

/* the "script" */
gapOpen = .5;
gapExtend = .3;
subst[A][A] = 0.1;
subst[C][A] = 0.2;
subst[C][G] = 0.3;
subst[T][C] = 0.4;
probby[A][A][A] = 0.01;
probby[A][C][A] = 0.1;
probby[A][C][T] = 0.2;
probby[C][A][A] = 0.3;
probby[C][A][C] = 0.4;
probby[C][T][G] = 0.5;
probby[T][A][A] = 0.6;
pset my_simple_parse = { start (match) };
pset my_parse = { start (match (DNA1[A]DNA2[A] match (DNA2[C] insert (match (end))))) };
pset my_pset = parse ( start -> DNA1="AA", DNA2="C" );
func my_parse_likelihood = psum (my_simple_parse);
func my_likelihood = psum (my_pset);
pset still_my_parse = pmax (my_pset);
pset best_parse = pmax (my_pset);
pset random_parse = psample my_pset;
func my_deriv = dlog (my_likelihood) / dlog (gapOpen);
func my_deriv2 = dlog my_parse_likelihood / dlog subst[A][A];
