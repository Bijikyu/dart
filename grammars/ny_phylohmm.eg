(&scheme
 (load-from-path "xrate-stdlib.scm"))


;; Begin by defining the number of rate classes and the gamma hyperparameters
(&define CLASSES 10)
(&define ALPHA 1)
(&define BETA 1)

;; Scheme stuff
(&scheme-discard
 ;; Import Scheme list library
 (use-modules (srfi srfi-1))
 ;; Define rate classes
 ;; Uses the DART-provided Scheme function (discrete-gamma-medians alpha beta K)
 (define RATES (discrete-gamma-medians ALPHA BETA CLASSES)))

;; Now comes the grammar
(grammar
 (name NielsenYangPhyloHMM)
 (parametric)

 ;; Probability parameters
 ;; Probability of staying in the same rate class, or leaving
 (const-pgroup
  ;; Uncomment to fit each column separately (no autocorrelation)
  ;; ((stayProb (&/ 1 CLASSES)) (leaveProb (&- 1 (&/ 1 CLASSES)))))
  ;; Uncomment to introduce some autocorrelation
  ((stayProb .5) (leaveProb .5)))

 ;; Codon probability parameters
 (&scheme (xrate-NY-prob-params 'pi_))

 ;; Rate parameters
 (const-rate
  (omega_global 1)  ;; global synonymous/nonsynonymous ratio
  (kappa 1))  ;; transition/transversion ratio

 (rate
  (R_global 1))  ;; global rate scaling.... non-const, so can find best scale via training

 ;; Main loop over classes
 (&foreach-integer
  CLASS
  (1 CLASSES)

  ;; Rate multiplier for this class
  ;; Uncomment to have the phylo-HMM states be scaled by global rate
  ;; (const-rate ((&. R_ CLASS) (&scheme (list-ref RATES (&- CLASS 1)))))
  (const-rate ((&. R_ CLASS) 1))

  ;; Omega multiplier for this class
  ;; Uncomment to fix the ka/ks for all phylo-HMM states
  ;; (const-rate ((&. omega_ CLASS) 1))
  (const-rate ((&. omega_ CLASS) (&scheme (list-ref RATES (&- CLASS 1)))))

  ;; Markov chain for codon substitution
  (&scheme
   (xrate-NY-codon-chain '((&. NY1_ CLASS) (&. NY2_ CLASS) (&. NY3_ CLASS)) 'pi_ 'kappa 1 (quote ((&. R_ CLASS) (&. omega_ CLASS) omega_global R_global)) (quote ((&. R_ CLASS) R_global))))

  ;; transformation rules for state S{CLASS}

  (transform
   (from (START))
   (to ((&. S CLASS)))
   (prob (&/ 1 CLASSES)))

  (transform
   (from ((&. S CLASS)))
   (to ((&. NY1_ CLASS) (&. NY2_ CLASS) (&. NY3_ CLASS) (&. S CLASS *)))

   ;; OMEGA_BIN row is annotated '0', '1', '2' ...
   (annotate
    (row OMEGA_BIN)
    (column (&. NY1_ CLASS))
    (label (&chr (&+ CLASS (&ord 0) -1))))

   (annotate
    (row OMEGA_BIN)
    (column (&. NY2_ CLASS))
    (label (&chr (&+ CLASS (&ord 0) -1))))

   (annotate
    (row OMEGA_BIN)
    (column (&. NY3_ CLASS))
    (label (&chr (&+ CLASS (&ord 0) -1))))

   ;; FRAME row is annotated '1', '2', '3'
   (annotate
    (row FRAME)
    (column (&. NY1_ CLASS))
    (label 1))

   (annotate
    (row FRAME)
    (column (&. NY2_ CLASS))
    (label 2))

   (annotate
    (row FRAME)
    (column (&. NY3_ CLASS))
    (label 3)))

  (transform
   (from ((&. S CLASS *)))
   (to ()) (prob 1))

  ;; transitions
  (&foreach-integer
   DEST_CLASS
   (1 CLASSES)
   (transform
    (from ((&. S CLASS *)))
    (to ((&. S DEST_CLASS)))
    (prob (&?
	   (&= CLASS DEST_CLASS)
	   (stayProb)
	   (leaveProb / (&- CLASSES 1))))))

  ) ;; end main loop over classes

 ;; Add a START->END transition, so empty alignments don't have zero likelihood
 (transform
  (from (START))
  (to ()))

 )  ;; end grammar

(alphabet
 (name DNA)
 (token (a c g t))
 (complement (t g c a))
 (extend (to n) (from a) (from c) (from g) (from t))
 (extend (to x) (from a) (from c) (from g) (from t))
 (extend (to u) (from t))
 (extend (to r) (from a) (from g))
 (extend (to y) (from c) (from t))
 (extend (to m) (from a) (from c))
 (extend (to k) (from g) (from t))
 (extend (to s) (from c) (from g))
 (extend (to w) (from a) (from t))
 (extend (to h) (from a) (from c) (from t))
 (extend (to b) (from c) (from g) (from t))
 (extend (to v) (from a) (from c) (from g))
 (extend (to d) (from a) (from g) (from t))
 (wildcard *)
)  ;; end alphabet DNA

