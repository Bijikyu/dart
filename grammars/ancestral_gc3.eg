;; p0*p1*p2 model for codons

;; Here's the grammar...
(grammar
 (name Ancestral_codon_GC)
 (parametric)

 ;; Define a hybrid chain with a different chain on each branch.
 (hybrid-chain
  (terminal (HYBRID0 HYBRID1 HYBRID2))
  (row ?)   ;; the #=GS tag used to select substitution models (automagically equal to the node name)
  (components
   (&foreach-branch  ;; loop over node names
    NODE
    ((label NODE) (terminal ((&. COD0_ NODE)
			     (&. COD1_ NODE)
			     (&. COD2_ NODE))))
    )
   )
  )

 ;; Main loop over branches
 (&foreach-branch
  NODE

  ;; Parameters
  ;; Branch-specific codon bias
  (pgroup
   (((&. p0_ GC_ NODE) .5) ((&. p0_ AT_ NODE) .5))
   (((&. p1_ GC_ NODE) .5) ((&. p1_ AT_ NODE) .5))
   (((&. p2_ GC_ NODE) .5) ((&. p2_ AT_ NODE) .5))
   )

  ;; Branch-specific substitution rate
  (rate
   ((&. RATE_ NODE) 1)
   )

  ;; Branch-specific substitution rate matrix
  (chain
   (update-policy parametric)
   (terminal ((&. COD0_ NODE)
	      (&. COD1_ NODE)
	      (&. COD2_ NODE)))

   (&foreach-token
    i0
    (&foreach-token
     i1
     (&foreach-token
      i2
      (&warn Initializing: codon (&. i0 i1 i2) , branch NODE)
      ;; initial probability distribution
      (initial (state (i0 i1 i2)) (prob ((&. p0_ (&? (&or (&= i0 g) (&= i0 c)) GC AT) _ NODE)
					 * (&. p1_ (&? (&or (&= i1 g) (&= i1 c)) GC AT) _ NODE)
					 * (&. p2_ (&? (&or (&= i2 g) (&= i2 c)) GC AT) _ NODE))))

      ;; mutation rates
      (&foreach-token
       j0
       (&foreach-token
	j1
	(&foreach-token
	 j2
	 (&?
	  (&and (&= i0 j0) (&= i1 j1) (&= i2 j2))
	  ()
	  (mutate
	   (from (i0 i1 i2))
	   (to (j0 j1 j2))
	   (rate (((&. RATE_ NODE)
		   * (&. p0_ (&? (&or (&= j0 g) (&= j0 c)) GC AT) _ NODE)
		   * (&. p1_ (&? (&or (&= j1 g) (&= j1 c)) GC AT) _ NODE)
		   * (&. p2_ (&? (&or (&= j2 g) (&= j2 c)) GC AT) _ NODE))))
	   )
	  )
	 )
	)
       )  ;; end i-loop
      )
     )
    )  ;; end j-loop
   ) ;; end chain

  ) ;; end loop over branches

 ;; transformation rules
 ;; START state
 (transform
  (from (START))
  (to (EMIT)))

 (transform
  (from (START))
  (to ()))

 ;; EMIT state
 (transform
  (from (EMIT))
  (to (HYBRID0 HYBRID1 HYBRID2 EMIT*)))

 (transform
  (from (EMIT*))
  (to (EMIT)))

 (transform
  (from (EMIT*))
  (to ()))

 ) ;; end grammar Ancestral_GC_content


; Uncomment binary alphabet to use it for testing
; (alphabet (name Binary) (token (0 1)))

(alphabet
 (name RNA)
 (token (a c g u))
 (complement (u g c a))
 (extend (to n) (from a) (from c) (from g) (from u))
 (extend (to x) (from a) (from c) (from g) (from u))
 (extend (to t) (from u))
 (extend (to r) (from a) (from g))
 (extend (to y) (from c) (from u))
 (extend (to m) (from a) (from c))
 (extend (to k) (from g) (from u))
 (extend (to s) (from c) (from g))
 (extend (to w) (from a) (from u))
 (extend (to h) (from a) (from c) (from u))
 (extend (to b) (from c) (from g) (from u))
 (extend (to v) (from a) (from c) (from g))
 (extend (to d) (from a) (from g) (from u))
 (wildcard *)
 ) ;; end alphabet RNA

